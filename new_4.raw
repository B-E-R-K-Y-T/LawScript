ВКЛЮЧИТЬ lib
ВКЛЮЧИТЬ structs


ОПРЕДЕЛИТЬ ПРОЦЕДУРУ func2(a, b)(
НАПЕЧАТАТЬ "func2";
НАПЕЧАТАТЬ ((2 + 2) * 2) - (2 + 2) * 2 + (b + 2) * b - (2 + 2) * 2 * b * b * b * b;
    НАПЕЧАТАТЬ (НЕ ((ИСТИНА И ЛОЖЬ) ИЛИ ИСТИНА И НЕ ИСТИНА)) И ЛОЖЬ;
    НАПЕЧАТАТЬ НЕ ИСТИНА РАВНО ИСТИНА ИЛИ ИСТИНА;
    НАПЕЧАТАТЬ НЕ ИСТИНА РАВНО ИСТИНА ИЛИ ИСТИНА;
    НАПЕЧАТАТЬ ИСТИНА РАВНО ИСТИНА ИЛИ ИСТИНА;
    НАПЕЧАТАТЬ 1 + 1 РАВНО (2 + 2) * 2;

    НАПЕЧАТАТЬ "TEST_3=";
    НАПЕЧАТАТЬ (2 + 2) * 2 РАВНО (2 + 2) * 2;
    НАПЕЧАТАТЬ "TEST_4=";
    НАПЕЧАТАТЬ (НЕ ((ИСТИНА И ЛОЖЬ) ИЛИ ИСТИНА И НЕ ИСТИНА)) И ЛОЖЬ;
func4();
(1 + 10000) - (2 + 100);
(1 БОЛЬШЕ 10000) ИЛИ (2 БОЛЬШЕ 100);
       НАПЕЧАТАТЬ "" + to_string(mul2(mul1())^ 2);

       НАПЕЧАТАТЬ "" + to_string(mul1()+ 2);
       НАПЕЧАТАТЬ "" + to_string(mul2(mul1())+ 2);

       # НАПЕЧАТАТЬ "" + to_string(mul1(3,4) + 2);
       # АПЕЧАТАТЬ "" + to_string(mul1() + 2);
       # ЗАДАТЬ ф = 1 + mul1() + mul(2, 3, 4);
(1,+1);
mul(9, mul(mul(3, 1), 5, 4), 8);
array(1,2,3,4,array(1,2,3,4));

    #print(НАПЕЧАТАТЬ);
    НАПЕЧАТАТЬ mul(9, mul(mul(3, 1), 5, 4), 8);
    НАПЕЧАТАТЬ a;
    НАПЕЧАТАТЬ b;
    НАПЕЧАТАТЬ a + b;

    ВЕРНУТЬ a + b;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ func3(a, b, c)(
    НАПЕЧАТАТЬ a;
    НАПЕЧАТАТЬ b;
    НАПЕЧАТАТЬ c;
    НАПЕЧАТАТЬ a + b + c;

    ВЕРНУТЬ a + b;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ mul(a, b, c) (
    ЗАДАТЬ res = a * b * c;
    #НАПЕЧАТАТЬ "CALL mul " + to_string(res);
    #НАПЕЧАТАТЬ to_string;
    #НАПЕЧАТАТЬ mul;
    ВЕРНУТЬ a * b * c;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ mul1() (
    ЦИКЛ ОТ 1 ДО 100 (
        НАПЕЧАТАТЬ 1;
    )
    ВЕРНУТЬ 1;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ mul2(ф) (
    ВЕРНУТЬ 1;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ mul2333() (
НАПЕЧАТАТЬ "ОПРЕДЕЛИТЬ ПРОЦЕДУРУ mul2333()";
    ВЕРНУТЬ 1;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ func(a)(
НАПЕЧАТАТЬ "func";
НАПЕЧАТАТЬ 2 * (mul2(mul2(1 + 1) * 2) - 1);

    НАПЕЧАТАТЬ (НЕ ((ИСТИНА И ЛОЖЬ) ИЛИ ИСТИНА И НЕ ИСТИНА)) И ЛОЖЬ;
НАПЕЧАТАТЬ -(-(-(-(-(-1)))));
(1 БОЛЬШЕ 10000) ИЛИ (2 БОЛЬШЕ 100);
# to_string();
(1 + 10000) - (2 + 100);

       НАПЕЧАТАТЬ "" + to_string(1 + 2);
       НАПЕЧАТАТЬ "" + to_string(mul1()+ 2);
       НАПЕЧАТАТЬ "to_string(mul2(mul1())+ 2);=" + to_string(mul2(mul1())+ 2);

       ЗАДАТЬ ф = 1 + mul1() + mul(2, 3, 4) + mul(5, 6, 7);
       НАПЕЧАТАТЬ "ф=" + to_string(ф);
    ЗАДАТЬ икс = mul;
    НАПЕЧАТАТЬ икс;
    НАПЕЧАТАТЬ икс(1,2,2);

    НАПЕЧАТАТЬ mul(9, mul(mul(3, 1, 2), 5, 4), 8);
   ЗАДАТЬ мас = (1+1);
   ЗАДАТЬ мас1 = array(to_string(mul2(mul1())+ 2),2,array(1,2,3,4,array(1,mul(9, mul(mul(3, 1, 2), 5, 4), 8),3,4)),4,array(1,mul(9, mul(mul(3, 1, 2), 5, 4), 8),3,4));
    print(мас1);
    НАПЕЧАТАТЬ мас1;
    print(1,2,3,4);
    # print(1+1,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,);
    НАПЕЧАТАТЬ мас;
    НАПЕЧАТАТЬ мас1;

    arr_append(мас1, 1);
    arr_append(мас1, array(666,2 + 2 * 2,(2 + 2) * 2, ИСТИНА И НЕ ЛОЖЬ, ИСТИНА ИЛИ ИСТИНА И ЛОЖЬ));

    НАПЕЧАТАТЬ мас1;

    arr_remove(мас1, 2);

    НАПЕЧАТАТЬ мас1;
    # НАПЕЧАТАТЬ масasd;

    func4();
    ЗАДАТЬ b = 1;
НАПЕЧАТАТЬ ((2 + 2) * 2) - (2 + 2) * 2 + (b + 2) * b - (2 + 2) * 2 * b * b * b * b;

ЗАДАТЬ arr = array(1,2,3, array(1,2,3.1, to_string(3.1)));

    НАПЕЧАТАТЬ arr_get_item(arr, -1);
    ЗАДАТЬ item =  arr_get_item(arr, -1);
НАПЕЧАТАТЬ "item=" + to_string(item);

    НАПЕЧАТАТЬ arr;
    arr_set_item(arr, -1, "2");
    НАПЕЧАТАТЬ arr;
    НАПЕЧАТАТЬ arr_len(arr);

    НАПЕЧАТАТЬ пузырьковая_сортировка(array(1,-3,10,0, 100, -1,-1), mul2333());
    НАПЕЧАТАТЬ "to_string(пузырьковая_сортировка(array(1,-3,10,0, 100, -1,-1), mul2333()))=" + to_string(пузырьковая_сортировка(array(1,-3,10,0, 100, -1,-1), mul2333()));

    ВЕРНУТЬ mul(9, mul(mul(3, 1, 2), 5, 4), 8) * mul(9, mul(mul(3, 1, 2), 5, 4), 8);
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ пузырьковая_сортировка(массив, f) (
    ЗАДАТЬ n = arr_len(массив) - 1;
    f;
    ЗАДАТЬ i = 0;
    ЗАДАТЬ j = 0;
    ЗАДАТЬ временная = 0;

    # Внешний цикл для проходов по массиву
    ЦИКЛ ОТ i ДО n - 1 (
        # Внутренний цикл для сравнения элементов
        ЦИКЛ ОТ j ДО n - i - 1 (
            # Сравниваем соседние элементы
            ЕСЛИ arr_get_item(массив, j) БОЛЬШЕ arr_get_item(массив, j + 1) ТО (
                # Меняем элементы местами
                временная = arr_get_item(массив, j);
                arr_set_item(массив, j, arr_get_item(массив, j + 1));
                arr_set_item(массив, j + 1, временная);
            )
            j = j + 1;
        )
        j = 0;  # Сбрасываем счетчик внутреннего цикла
        i = i + 1;
    )

    НАПЕЧАТАТЬ "пузырьковая_сортировка=" + to_string(массив);

    ВЕРНУТЬ массив;
)

ОПРЕДЕЛИТЬ ПРОЦЕДУРУ func4()(

    ЗАДАТЬ счетчик = 0;
    ЦИКЛ ОТ 1 ДО mul(9, mul(mul(3, 1, 2), 5, 4), 8) * mul(9, mul(mul(3, 1, 2), 5, 4), 8) (
        счетчик = счетчик + 1;
        # НАПЕЧАТАТЬ "счетчик = " + to_string(счетчик) + "---" + to_string(mul(9, mul(mul(3, 1, 2), 5, 4), 8) * mul(9, mul(mul(3, 1, 2), 5, 4), 8));
        НАПЕЧАТАТЬ "счетчик = " + to_string(счетчик);
        НАПЕЧАТАТЬ счетчик БОЛЬШЕ 10000 ИЛИ счетчик БОЛЬШЕ 100;

        ЕСЛИ (счетчик БОЛЬШЕ 10000) ИЛИ (счетчик БОЛЬШЕ 100)  ТО (
            ПРЕРВАТЬ;
        )

        НАПЕЧАТАТЬ (счетчик БОЛЬШЕ 10000) ИЛИ (счетчик БОЛЬШЕ 100);
        #ЕСЛИ (счетчик БОЛЬШЕ 10000) ИЛИ (счетчик БОЛЬШЕ 100) ТО (
        #    1 / 0;
        # )
    )

)
ОПРЕДЕЛИТЬ ПРОЦЕДУРУ func1(x)(
    ЗАДАТЬ пер = 1;

    ЦИКЛ ОТ 1 ДО 10 (
        пер = пер + 1;

        НАПЕЧАТАТЬ "пер=" + to_string(пер);

        ЕСЛИ пер БОЛЬШЕ 4 ТО (
            НАПЕЧАТАТЬ func_wa(ИСТИНА И НЕ ЛОЖЬ, ИСТИНА ИЛИ ИСТИНА И ЛОЖЬ);
            НАПЕЧАТАТЬ "цикл прерван...";
            ПРЕРВАТЬ;
        )
        ИНАЧЕ (
            НАПЕЧАТАТЬ "продолжаем цикл...";
        )
    )

    НАПЕЧАТАТЬ 100 + func2(2 * 2, 5 * 5);
    НАПЕЧАТАТЬ 100 + func2(2 / 2, 5 / 5);
    НАПЕЧАТАТЬ 100 + func2(2 ^ 2, 5 ^ 2);
    func3(2 * 2, 5 * 5, 1);

    # 1 + func_wa(1, 2 ,3);
    НАПЕЧАТАТЬ func4;
    # func_wa(func4,func4(1));

    func_wa(ИСТИНА И НЕ ЛОЖЬ, ИСТИНА ИЛИ ИСТИНА И ЛОЖЬ);


   # НАПЕЧАТАТЬ "-" * 100;
   # НАПЕЧАТАТЬ 1 + func2(2, func2(1, 1)) * 2;
   # НАПЕЧАТАТЬ "func2(1 + 1, 2): " + to_string(func2(1 + 1, 2)) + "---" + to_string(func2(1 + 1, 4 * 4)) * 10;
    НАПЕЧАТАТЬ "func...";
    ВЕРНУТЬ 1;
)

ОПРЕДЕЛИТЬ САНКЦИЮ название_типа_санкции2 (
    СТАТЬЯ Статья 8.4 КоАП,
)
ОПРЕДЕЛИТЬ ПРАВО название_права (
    ОПИСАНИЕ Описание права))),
)

ОПРЕДЕЛИТЬ ОБЯЗАННОСТЬ название_обязанности11 (
    ОПИСАНИЕ Описание обязанности))),
)

ОПРЕДЕЛИТЬ ПРАВИЛО названиеправила (
    ОПИСАНИЕ Описание (,,,,,,,((правила))),,,,
)

ОПРЕДЕЛИТЬ СУБЪЕКТ название_субъекта (
    ИМЯ Добрый Добряк Добрякович,
)

ОПРЕДЕЛИТЬ ОБЪЕКТ название_объекта (
    ИМЯ Загрязнённый водоём,
)

ОПРЕДЕЛИТЬ УСЛОВИЕ название_условия (
    ОПИСАНИЕ Условие, при котором предприятие должно соблюдать экологические нормы, включая запрет на сбросы загрязняющих веществ в водоёмы.,
    КРИТЕРИИ (
		ПремияСотрудника ПРОЦЕДУРА func МЕНЬШЕ ,
    )
)


СОЗДАТЬ ДОКУМЕНТ название_документа (
    ДИСПОЗИЦИЯ (
        ПРАВО название_права,
        ОБЯЗАННОСТЬ название_обязанности11,
        ПРАВИЛО названиеправила,
    )
    САНКЦИЯ (
        ТИПЫ [название_типа_санкции название_типа_санкции],
        СТЕПЕНЬ СТРОГОСТИ ОЧЕНЬ_ВЫСОКАЯ,
        ПРОЦЕССУАЛЬНЫЙ АСПЕКТ Экологическая_экспертиза,
    )
    ГИПОТЕЗА (
        СУБЪЕКТ название_субъекта,
        ОБЪЕКТ название_объекта,
        УСЛОВИЕ название_условия,
    )
)


СОЗДАТЬ ФАКТИЧЕСКУЮ СИТУАЦИЮ название_фактической_ситуации2 (
    ОБЪЕКТ название_объекта,
    СУБЪЕКТ название_субъекта,

   ДАННЫЕ (
		ПремияСотрудника 150000,
    )
)


ПРОВЕРКА проверка_субъекта3 (
	ФАКТИЧЕСКАЯ СИТУАЦИЯ название_фактической_ситуации2,
	ДОКУМЕНТ название_документа,
)

